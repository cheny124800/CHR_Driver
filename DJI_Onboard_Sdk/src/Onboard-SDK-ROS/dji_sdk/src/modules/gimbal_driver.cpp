#include<dji_sdk/GimCtr.h>
//#include <dji_sdk/dji_sdk_node.h>
#include<serial/serial.h>
#include<ros/ros.h>

class GimbalCtr{
private:


	//按角度
	uint8_t PitchUp[9]={0x81,0x01,0x0A,0x01,0x00,0x00,0x03,0x01,0xff}; 
	uint8_t PitchDown[9]={0x81,0x01,0x0A,0x01,0x00,0x00,0x03,0x02,0xff};
	uint8_t YawRight[9]={0x81,0x01,0x0A,0x01,0x00,0x00,0x02,0x03,0xff};
	uint8_t YawLeft[9]={0x81,0x01,0x0A,0x01,0x00,0x00,0x01,0x03,0xff};

	//相机变倍的VISCA协议
	uint8_t ZoomTable[30][9] = {
		{0x81,0x01,0x04,0x47,0x00,0x00,0x00,0x00,0xff},//1
		{0x81,0x01,0x04,0x47,0x01,0x07,0x0f,0x0f,0xff},
		{0x81,0x01,0x04,0x47,0x02,0x02,0x02,0x02,0xff},
		{0x81,0x01,0x04,0x47,0x02,0x08,0x03,0x04,0xff},//4
		{0x81,0x01,0x04,0x47,0x02,0x0c,0x09,0x00,0xff},
		{0x81,0x01,0x04,0x47,0x02,0x0f,0x0d,0x08,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x02,0x07,0x0d,0xff},//7
		{0x81,0x01,0x04,0x47,0x03,0x04,0x0b,0x0d,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x06,0x0b,0x03,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x08,0x05,0x00,0xff},//10
		{0x81,0x01,0x04,0x47,0x03,0x09,0x0a,0x03,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0a,0x0b,0x07,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0b,0x0a,0x05,0xff},//13
		{0x81,0x01,0x04,0x47,0x03,0x0c,0x06,0x0d,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0d,0x00,0x04,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0d,0x08,0x01,0xff},//16
		{0x81,0x01,0x04,0x47,0x03,0x0d,0x0f,0x02,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0e,0x04,0x0a,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0e,0x09,0x05,0xff},//19
		{0x81,0x01,0x04,0x47,0x03,0x0e,0x0e,0x00,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x00,0x06,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x03,0x08,0xff},//22
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x05,0x0e,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x08,0x03,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x0a,0x09,0xff},//25
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x0c,0x0e,0xff},
		{0x81,0x01,0x04,0x47,0x03,0x0f,0x0e,0x07,0xff},
		{0x81,0x01,0x04,0x47,0x04,0x00,0x00,0x00,0xff},//28
		{0x81,0x01,0x04,0x47,0x04,0x00,0x00,0x00,0xff},
		{0x81,0x01,0x04,0x47,0x04,0x00,0x00,0x00,0xff},//30
	};

	//相机手动聚焦
	uint8_t focusOut[7]={0xff,0x01,0x00,0x80,0x00,0x00,0x81};
	uint8_t focusIn[7]={0xff,0x01,0x01,0x00,0x00,0x00,0x02};
	uint8_t focusStop[7]={0xff,0x01,0x00,0x00,0x00,0x00,0x01};

	//相机模式切换及拍照
	uint8_t SOR[7]={0xff,0x01,0x00,0x07,0x00,0x67,0x6f};
	uint8_t SOS[7]={0xff,0x01,0x00,0x07,0x00,0x55,0x5d};//在拍照模式下拍照，在录像模式下录像或者停止录像

	//一键回中
	uint8_t reset[9]={0x81,0x01,0x0A,0x01,0x00,0x00,0x03,0x03,0xFF};

	//航向跟随控制
	uint8_t cmd_follow_yaw_disable[11]= {0x3E,0x1F,0x06,0x25,0x01,0x1F,0x00,0x00,0x00,0x00,0x20};
	uint8_t cmd_follow_yaw_enable[11]= {0x3E,0x1F,0x06,0x25,0x01,0x1F,0x01,0x00,0x00,0x00,0x21};

	serial::Serial* mySerial = NULL;
	dji_sdk::GimCtr mGimCtr;
	ros::Subscriber gimCtrSub;
	int currentPitch = 0;
	int currentYaw = 0;
	ros::Rate focusTime = 10;
	ros::Rate zoomTime =1;
	
	
	void gimCtrCallBack(const dji_sdk::GimCtr::ConstPtr& gimCtrMsg){
		if(gimCtrMsg -> pry.x != 0){
			currentPitch+=gimCtrMsg -> pry.x;
			if(currentPitch >= 0){
				PitchUp[5] = (uint8_t)currentPitch;
				mySerial->write(PitchUp,9);
			}else{
				PitchDown[5]=(uint8_t)currentPitch;
				mySerial->write(PitchDown,9);
			}								
		}else if(gimCtrMsg -> pry.z != 0){
			currentYaw+=gimCtrMsg -> pry.z;
			if(currentPitch <= 0){
				YawLeft[5] = (uint8_t)currentYaw;
				mySerial->write(YawLeft,9);
			}else{
				YawRight[5] = (uint8_t)currentYaw;
				mySerial->write(YawRight,9);
			}
		}else if(gimCtrMsg ->mutiple.data != 0){
			mySerial->write(ZoomTable[gimCtrMsg ->mutiple.data],9);
			zoomTime.sleep();
		}else if(gimCtrMsg ->setFcus.data != 0){
			if(gimCtrMsg ->setFcus.data < 0){
				mySerial->write(focusIn,7);
				focusTime.sleep();
				mySerial->write(focusStop,7);
			}else{
				mySerial->write(focusOut,7);
				focusTime.sleep();
				mySerial->write(focusStop,7);
			}
		}else if(gimCtrMsg -> reset.data != 0){
			mySerial->write(reset,9);
		}else if(gimCtrMsg ->sos.data != 0){
			mySerial->write(SOS,7);
		}else if(gimCtrMsg ->sor.data != 0){
			mySerial->write(SOR,7);
		}
	}	


	// init Sub and Pub
	void initSubPub(ros::NodeHandle &nh){
		gimCtrSub = nh.subscribe("m600_gimCtr",10,&GimbalCtr::gimCtrCallBack,this);
	}

	
	void initMySerial(){
		if(mySerial == NULL){
			mySerial = new serial::Serial();
		}
		mySerial->setPort("/dev/ttyUSB0");
		mySerial->setBaudrate(115200);
		serial::Timeout to = serial::Timeout::simpleTimeout(1000);
    		mySerial->setTimeout(to);
    		mySerial->open();
		if (mySerial->isOpen()){
			ROS_INFO("Serial Port initialized");
		}
	};
	
public:
	
	GimbalCtr(ros::NodeHandle &nh){initMySerial();initSubPub(nh);}
	~GimbalCtr(){mySerial->close();}
	
};

int main(int argc ,char ** argv){
	ros::init(argc,argv,"M600_Gimbal");
	ros::NodeHandle nh;
	GimbalCtr* mGimbalCtr =  new GimbalCtr(nh);
	ros::spin();
	return 0;

}
