// Generated by gencpp from file dji_sdk/Emergency.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_EMERGENCY_H
#define DJI_SDK_MESSAGE_EMERGENCY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace dji_sdk
{
template <class ContainerAllocator>
struct Emergency_
{
  typedef Emergency_<ContainerAllocator> Type;

  Emergency_()
    : home()
    , land()
    , hover()
    , takeOff()  {
    }
  Emergency_(const ContainerAllocator& _alloc)
    : home(_alloc)
    , land(_alloc)
    , hover(_alloc)
    , takeOff(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _home_type;
  _home_type home;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _land_type;
  _land_type land;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _hover_type;
  _hover_type hover;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _takeOff_type;
  _takeOff_type takeOff;





  typedef boost::shared_ptr< ::dji_sdk::Emergency_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::Emergency_<ContainerAllocator> const> ConstPtr;

}; // struct Emergency_

typedef ::dji_sdk::Emergency_<std::allocator<void> > Emergency;

typedef boost::shared_ptr< ::dji_sdk::Emergency > EmergencyPtr;
typedef boost::shared_ptr< ::dji_sdk::Emergency const> EmergencyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::Emergency_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::Emergency_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/dji/DJI_Onboard_Sdk/src/Onboard-SDK-ROS/dji_sdk/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::Emergency_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::Emergency_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::Emergency_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::Emergency_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::Emergency_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::Emergency_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::Emergency_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d411b8cc595547a01bef8995efbdc30";
  }

  static const char* value(const ::dji_sdk::Emergency_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d411b8cc595547aULL;
  static const uint64_t static_value2 = 0x01bef8995efbdc30ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::Emergency_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/Emergency";
  }

  static const char* value(const ::dji_sdk::Emergency_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::Emergency_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt8 home\n\
std_msgs/UInt8 land\n\
std_msgs/UInt8 hover\n\
std_msgs/UInt8 takeOff\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
";
  }

  static const char* value(const ::dji_sdk::Emergency_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::Emergency_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.home);
      stream.next(m.land);
      stream.next(m.hover);
      stream.next(m.takeOff);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Emergency_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::Emergency_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::Emergency_<ContainerAllocator>& v)
  {
    s << indent << "home: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.home);
    s << indent << "land: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.land);
    s << indent << "hover: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.hover);
    s << indent << "takeOff: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.takeOff);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_EMERGENCY_H
