// Generated by gencpp from file dji_sdk/WaypointMission.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_WAYPOINTMISSION_H
#define DJI_SDK_MESSAGE_WAYPOINTMISSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/UInt8.h>
#include <geometry_msgs/Point.h>
#include <std_msgs/UInt16.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/Int16.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>
#include <std_msgs/UInt8.h>

namespace dji_sdk
{
template <class ContainerAllocator>
struct WaypointMission_
{
  typedef WaypointMission_<ContainerAllocator> Type;

  WaypointMission_()
    : missionIndex()
    , latLntCount()
    , latLntList()
    , actionCount()
    , waypointAction()
    , altitude()
    , velocity()
    , finishAction()
    , headingMode()
    , gimbalAngle()
    , repeatTimes()
    , isUseCam()
    , sor()
    , shootVel()  {
    }
  WaypointMission_(const ContainerAllocator& _alloc)
    : missionIndex(_alloc)
    , latLntCount(_alloc)
    , latLntList(_alloc)
    , actionCount(_alloc)
    , waypointAction(_alloc)
    , altitude(_alloc)
    , velocity(_alloc)
    , finishAction(_alloc)
    , headingMode(_alloc)
    , gimbalAngle(_alloc)
    , repeatTimes(_alloc)
    , isUseCam(_alloc)
    , sor(_alloc)
    , shootVel(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _missionIndex_type;
  _missionIndex_type missionIndex;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _latLntCount_type;
  _latLntCount_type latLntCount;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _latLntList_type;
  _latLntList_type latLntList;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _actionCount_type;
  _actionCount_type actionCount;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _waypointAction_type;
  _waypointAction_type waypointAction;

   typedef  ::std_msgs::UInt16_<ContainerAllocator>  _altitude_type;
  _altitude_type altitude;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _finishAction_type;
  _finishAction_type finishAction;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _headingMode_type;
  _headingMode_type headingMode;

   typedef  ::std_msgs::Int16_<ContainerAllocator>  _gimbalAngle_type;
  _gimbalAngle_type gimbalAngle;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _repeatTimes_type;
  _repeatTimes_type repeatTimes;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _isUseCam_type;
  _isUseCam_type isUseCam;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _sor_type;
  _sor_type sor;

   typedef  ::std_msgs::UInt8_<ContainerAllocator>  _shootVel_type;
  _shootVel_type shootVel;





  typedef boost::shared_ptr< ::dji_sdk::WaypointMission_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::WaypointMission_<ContainerAllocator> const> ConstPtr;

}; // struct WaypointMission_

typedef ::dji_sdk::WaypointMission_<std::allocator<void> > WaypointMission;

typedef boost::shared_ptr< ::dji_sdk::WaypointMission > WaypointMissionPtr;
typedef boost::shared_ptr< ::dji_sdk::WaypointMission const> WaypointMissionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::WaypointMission_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::WaypointMission_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/dji/DJI_Onboard_Sdk/src/Onboard-SDK-ROS/dji_sdk/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::WaypointMission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::WaypointMission_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::WaypointMission_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::WaypointMission_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::WaypointMission_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::WaypointMission_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::WaypointMission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3cfe4d7c0c45bcdd0d11c1761dfe0b20";
  }

  static const char* value(const ::dji_sdk::WaypointMission_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3cfe4d7c0c45bcddULL;
  static const uint64_t static_value2 = 0x0d11c1761dfe0b20ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::WaypointMission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/WaypointMission";
  }

  static const char* value(const ::dji_sdk::WaypointMission_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::WaypointMission_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/UInt8 missionIndex\n\
std_msgs/UInt8 latLntCount\n\
geometry_msgs/Point[] latLntList\n\
std_msgs/UInt8 actionCount\n\
geometry_msgs/Point[] waypointAction\n\
std_msgs/UInt16 altitude\n\
std_msgs/UInt8 velocity\n\
std_msgs/UInt8 finishAction\n\
std_msgs/UInt8 headingMode\n\
std_msgs/Int16 gimbalAngle\n\
std_msgs/UInt8 repeatTimes\n\
std_msgs/UInt8 isUseCam\n\
std_msgs/UInt8 sor\n\
std_msgs/UInt8 shootVel\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt8\n\
uint8 data\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: std_msgs/UInt16\n\
uint16 data\n\
\n\
================================================================================\n\
MSG: std_msgs/Int16\n\
int16 data\n\
";
  }

  static const char* value(const ::dji_sdk::WaypointMission_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::WaypointMission_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.missionIndex);
      stream.next(m.latLntCount);
      stream.next(m.latLntList);
      stream.next(m.actionCount);
      stream.next(m.waypointAction);
      stream.next(m.altitude);
      stream.next(m.velocity);
      stream.next(m.finishAction);
      stream.next(m.headingMode);
      stream.next(m.gimbalAngle);
      stream.next(m.repeatTimes);
      stream.next(m.isUseCam);
      stream.next(m.sor);
      stream.next(m.shootVel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WaypointMission_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::WaypointMission_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::WaypointMission_<ContainerAllocator>& v)
  {
    s << indent << "missionIndex: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.missionIndex);
    s << indent << "latLntCount: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.latLntCount);
    s << indent << "latLntList[]" << std::endl;
    for (size_t i = 0; i < v.latLntList.size(); ++i)
    {
      s << indent << "  latLntList[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.latLntList[i]);
    }
    s << indent << "actionCount: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.actionCount);
    s << indent << "waypointAction[]" << std::endl;
    for (size_t i = 0; i < v.waypointAction.size(); ++i)
    {
      s << indent << "  waypointAction[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.waypointAction[i]);
    }
    s << indent << "altitude: ";
    s << std::endl;
    Printer< ::std_msgs::UInt16_<ContainerAllocator> >::stream(s, indent + "  ", v.altitude);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "finishAction: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.finishAction);
    s << indent << "headingMode: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.headingMode);
    s << indent << "gimbalAngle: ";
    s << std::endl;
    Printer< ::std_msgs::Int16_<ContainerAllocator> >::stream(s, indent + "  ", v.gimbalAngle);
    s << indent << "repeatTimes: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.repeatTimes);
    s << indent << "isUseCam: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.isUseCam);
    s << indent << "sor: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.sor);
    s << indent << "shootVel: ";
    s << std::endl;
    Printer< ::std_msgs::UInt8_<ContainerAllocator> >::stream(s, indent + "  ", v.shootVel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_WAYPOINTMISSION_H
