// Generated by gencpp from file dji_sdk/GimCtr.msg
// DO NOT EDIT!


#ifndef DJI_SDK_MESSAGE_GIMCTR_H
#define DJI_SDK_MESSAGE_GIMCTR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>
#include <std_msgs/Int32.h>

namespace dji_sdk
{
template <class ContainerAllocator>
struct GimCtr_
{
  typedef GimCtr_<ContainerAllocator> Type;

  GimCtr_()
    : pry()
    , mutiple()
    , setFcus()
    , reset()
    , sos()
    , sor()  {
    }
  GimCtr_(const ContainerAllocator& _alloc)
    : pry(_alloc)
    , mutiple(_alloc)
    , setFcus(_alloc)
    , reset(_alloc)
    , sos(_alloc)
    , sor(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pry_type;
  _pry_type pry;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _mutiple_type;
  _mutiple_type mutiple;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _setFcus_type;
  _setFcus_type setFcus;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _reset_type;
  _reset_type reset;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _sos_type;
  _sos_type sos;

   typedef  ::std_msgs::Int32_<ContainerAllocator>  _sor_type;
  _sor_type sor;





  typedef boost::shared_ptr< ::dji_sdk::GimCtr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dji_sdk::GimCtr_<ContainerAllocator> const> ConstPtr;

}; // struct GimCtr_

typedef ::dji_sdk::GimCtr_<std::allocator<void> > GimCtr;

typedef boost::shared_ptr< ::dji_sdk::GimCtr > GimCtrPtr;
typedef boost::shared_ptr< ::dji_sdk::GimCtr const> GimCtrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dji_sdk::GimCtr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dji_sdk::GimCtr_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace dji_sdk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'dji_sdk': ['/home/dji/DJI_Onboard_Sdk/src/Onboard-SDK-ROS/dji_sdk/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::GimCtr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dji_sdk::GimCtr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::GimCtr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dji_sdk::GimCtr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::GimCtr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dji_sdk::GimCtr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dji_sdk::GimCtr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "884bd8fe246ac26d7bb87013a1d884c1";
  }

  static const char* value(const ::dji_sdk::GimCtr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x884bd8fe246ac26dULL;
  static const uint64_t static_value2 = 0x7bb87013a1d884c1ULL;
};

template<class ContainerAllocator>
struct DataType< ::dji_sdk::GimCtr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dji_sdk/GimCtr";
  }

  static const char* value(const ::dji_sdk::GimCtr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dji_sdk::GimCtr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point pry\n\
std_msgs/Int32 mutiple\n\
std_msgs/Int32 setFcus\n\
std_msgs/Int32 reset\n\
std_msgs/Int32 sos\n\
std_msgs/Int32 sor\n\
		\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: std_msgs/Int32\n\
int32 data\n\
";
  }

  static const char* value(const ::dji_sdk::GimCtr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dji_sdk::GimCtr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pry);
      stream.next(m.mutiple);
      stream.next(m.setFcus);
      stream.next(m.reset);
      stream.next(m.sos);
      stream.next(m.sor);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimCtr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dji_sdk::GimCtr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dji_sdk::GimCtr_<ContainerAllocator>& v)
  {
    s << indent << "pry: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pry);
    s << indent << "mutiple: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.mutiple);
    s << indent << "setFcus: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.setFcus);
    s << indent << "reset: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.reset);
    s << indent << "sos: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.sos);
    s << indent << "sor: ";
    s << std::endl;
    Printer< ::std_msgs::Int32_<ContainerAllocator> >::stream(s, indent + "  ", v.sor);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DJI_SDK_MESSAGE_GIMCTR_H
