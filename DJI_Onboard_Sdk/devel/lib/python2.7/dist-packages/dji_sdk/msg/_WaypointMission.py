# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from dji_sdk/WaypointMission.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class WaypointMission(genpy.Message):
  _md5sum = "3cfe4d7c0c45bcdd0d11c1761dfe0b20"
  _type = "dji_sdk/WaypointMission"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """std_msgs/UInt8 missionIndex
std_msgs/UInt8 latLntCount
geometry_msgs/Point[] latLntList
std_msgs/UInt8 actionCount
geometry_msgs/Point[] waypointAction
std_msgs/UInt16 altitude
std_msgs/UInt8 velocity
std_msgs/UInt8 finishAction
std_msgs/UInt8 headingMode
std_msgs/Int16 gimbalAngle
std_msgs/UInt8 repeatTimes
std_msgs/UInt8 isUseCam
std_msgs/UInt8 sor
std_msgs/UInt8 shootVel

================================================================================
MSG: std_msgs/UInt8
uint8 data

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/UInt16
uint16 data

================================================================================
MSG: std_msgs/Int16
int16 data
"""
  __slots__ = ['missionIndex','latLntCount','latLntList','actionCount','waypointAction','altitude','velocity','finishAction','headingMode','gimbalAngle','repeatTimes','isUseCam','sor','shootVel']
  _slot_types = ['std_msgs/UInt8','std_msgs/UInt8','geometry_msgs/Point[]','std_msgs/UInt8','geometry_msgs/Point[]','std_msgs/UInt16','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/Int16','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8','std_msgs/UInt8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       missionIndex,latLntCount,latLntList,actionCount,waypointAction,altitude,velocity,finishAction,headingMode,gimbalAngle,repeatTimes,isUseCam,sor,shootVel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(WaypointMission, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.missionIndex is None:
        self.missionIndex = std_msgs.msg.UInt8()
      if self.latLntCount is None:
        self.latLntCount = std_msgs.msg.UInt8()
      if self.latLntList is None:
        self.latLntList = []
      if self.actionCount is None:
        self.actionCount = std_msgs.msg.UInt8()
      if self.waypointAction is None:
        self.waypointAction = []
      if self.altitude is None:
        self.altitude = std_msgs.msg.UInt16()
      if self.velocity is None:
        self.velocity = std_msgs.msg.UInt8()
      if self.finishAction is None:
        self.finishAction = std_msgs.msg.UInt8()
      if self.headingMode is None:
        self.headingMode = std_msgs.msg.UInt8()
      if self.gimbalAngle is None:
        self.gimbalAngle = std_msgs.msg.Int16()
      if self.repeatTimes is None:
        self.repeatTimes = std_msgs.msg.UInt8()
      if self.isUseCam is None:
        self.isUseCam = std_msgs.msg.UInt8()
      if self.sor is None:
        self.sor = std_msgs.msg.UInt8()
      if self.shootVel is None:
        self.shootVel = std_msgs.msg.UInt8()
    else:
      self.missionIndex = std_msgs.msg.UInt8()
      self.latLntCount = std_msgs.msg.UInt8()
      self.latLntList = []
      self.actionCount = std_msgs.msg.UInt8()
      self.waypointAction = []
      self.altitude = std_msgs.msg.UInt16()
      self.velocity = std_msgs.msg.UInt8()
      self.finishAction = std_msgs.msg.UInt8()
      self.headingMode = std_msgs.msg.UInt8()
      self.gimbalAngle = std_msgs.msg.Int16()
      self.repeatTimes = std_msgs.msg.UInt8()
      self.isUseCam = std_msgs.msg.UInt8()
      self.sor = std_msgs.msg.UInt8()
      self.shootVel = std_msgs.msg.UInt8()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.missionIndex.data, _x.latLntCount.data))
      length = len(self.latLntList)
      buff.write(_struct_I.pack(length))
      for val1 in self.latLntList:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_B().pack(self.actionCount.data))
      length = len(self.waypointAction)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypointAction:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_H3Bh4B().pack(_x.altitude.data, _x.velocity.data, _x.finishAction.data, _x.headingMode.data, _x.gimbalAngle.data, _x.repeatTimes.data, _x.isUseCam.data, _x.sor.data, _x.shootVel.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.missionIndex is None:
        self.missionIndex = std_msgs.msg.UInt8()
      if self.latLntCount is None:
        self.latLntCount = std_msgs.msg.UInt8()
      if self.latLntList is None:
        self.latLntList = None
      if self.actionCount is None:
        self.actionCount = std_msgs.msg.UInt8()
      if self.waypointAction is None:
        self.waypointAction = None
      if self.altitude is None:
        self.altitude = std_msgs.msg.UInt16()
      if self.velocity is None:
        self.velocity = std_msgs.msg.UInt8()
      if self.finishAction is None:
        self.finishAction = std_msgs.msg.UInt8()
      if self.headingMode is None:
        self.headingMode = std_msgs.msg.UInt8()
      if self.gimbalAngle is None:
        self.gimbalAngle = std_msgs.msg.Int16()
      if self.repeatTimes is None:
        self.repeatTimes = std_msgs.msg.UInt8()
      if self.isUseCam is None:
        self.isUseCam = std_msgs.msg.UInt8()
      if self.sor is None:
        self.sor = std_msgs.msg.UInt8()
      if self.shootVel is None:
        self.shootVel = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.missionIndex.data, _x.latLntCount.data,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latLntList = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.latLntList.append(val1)
      start = end
      end += 1
      (self.actionCount.data,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypointAction = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.waypointAction.append(val1)
      _x = self
      start = end
      end += 11
      (_x.altitude.data, _x.velocity.data, _x.finishAction.data, _x.headingMode.data, _x.gimbalAngle.data, _x.repeatTimes.data, _x.isUseCam.data, _x.sor.data, _x.shootVel.data,) = _get_struct_H3Bh4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.missionIndex.data, _x.latLntCount.data))
      length = len(self.latLntList)
      buff.write(_struct_I.pack(length))
      for val1 in self.latLntList:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_B().pack(self.actionCount.data))
      length = len(self.waypointAction)
      buff.write(_struct_I.pack(length))
      for val1 in self.waypointAction:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_H3Bh4B().pack(_x.altitude.data, _x.velocity.data, _x.finishAction.data, _x.headingMode.data, _x.gimbalAngle.data, _x.repeatTimes.data, _x.isUseCam.data, _x.sor.data, _x.shootVel.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.missionIndex is None:
        self.missionIndex = std_msgs.msg.UInt8()
      if self.latLntCount is None:
        self.latLntCount = std_msgs.msg.UInt8()
      if self.latLntList is None:
        self.latLntList = None
      if self.actionCount is None:
        self.actionCount = std_msgs.msg.UInt8()
      if self.waypointAction is None:
        self.waypointAction = None
      if self.altitude is None:
        self.altitude = std_msgs.msg.UInt16()
      if self.velocity is None:
        self.velocity = std_msgs.msg.UInt8()
      if self.finishAction is None:
        self.finishAction = std_msgs.msg.UInt8()
      if self.headingMode is None:
        self.headingMode = std_msgs.msg.UInt8()
      if self.gimbalAngle is None:
        self.gimbalAngle = std_msgs.msg.Int16()
      if self.repeatTimes is None:
        self.repeatTimes = std_msgs.msg.UInt8()
      if self.isUseCam is None:
        self.isUseCam = std_msgs.msg.UInt8()
      if self.sor is None:
        self.sor = std_msgs.msg.UInt8()
      if self.shootVel is None:
        self.shootVel = std_msgs.msg.UInt8()
      end = 0
      _x = self
      start = end
      end += 2
      (_x.missionIndex.data, _x.latLntCount.data,) = _get_struct_2B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.latLntList = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.latLntList.append(val1)
      start = end
      end += 1
      (self.actionCount.data,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.waypointAction = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.waypointAction.append(val1)
      _x = self
      start = end
      end += 11
      (_x.altitude.data, _x.velocity.data, _x.finishAction.data, _x.headingMode.data, _x.gimbalAngle.data, _x.repeatTimes.data, _x.isUseCam.data, _x.sor.data, _x.shootVel.data,) = _get_struct_H3Bh4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H3Bh4B = None
def _get_struct_H3Bh4B():
    global _struct_H3Bh4B
    if _struct_H3Bh4B is None:
        _struct_H3Bh4B = struct.Struct("<H3Bh4B")
    return _struct_H3Bh4B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
