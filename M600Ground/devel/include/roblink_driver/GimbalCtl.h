// Generated by gencpp from file roblink_driver/GimbalCtl.msg
// DO NOT EDIT!


#ifndef ROBLINK_DRIVER_MESSAGE_GIMBALCTL_H
#define ROBLINK_DRIVER_MESSAGE_GIMBALCTL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roblink_driver
{
template <class ContainerAllocator>
struct GimbalCtl_
{
  typedef GimbalCtl_<ContainerAllocator> Type;

  GimbalCtl_()
    : pitch(0.0)
    , yaw(0.0)
    , zoom(0.0)
    , focus(0.0)
    , home(0)
    , TakePicture(0)
    , cameraModeChange(0)
    , yawfollow(0)  {
    }
  GimbalCtl_(const ContainerAllocator& _alloc)
    : pitch(0.0)
    , yaw(0.0)
    , zoom(0.0)
    , focus(0.0)
    , home(0)
    , TakePicture(0)
    , cameraModeChange(0)
    , yawfollow(0)  {
  (void)_alloc;
    }



   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _yaw_type;
  _yaw_type yaw;

   typedef float _zoom_type;
  _zoom_type zoom;

   typedef float _focus_type;
  _focus_type focus;

   typedef uint16_t _home_type;
  _home_type home;

   typedef uint16_t _TakePicture_type;
  _TakePicture_type TakePicture;

   typedef uint16_t _cameraModeChange_type;
  _cameraModeChange_type cameraModeChange;

   typedef uint16_t _yawfollow_type;
  _yawfollow_type yawfollow;





  typedef boost::shared_ptr< ::roblink_driver::GimbalCtl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roblink_driver::GimbalCtl_<ContainerAllocator> const> ConstPtr;

}; // struct GimbalCtl_

typedef ::roblink_driver::GimbalCtl_<std::allocator<void> > GimbalCtl;

typedef boost::shared_ptr< ::roblink_driver::GimbalCtl > GimbalCtlPtr;
typedef boost::shared_ptr< ::roblink_driver::GimbalCtl const> GimbalCtlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roblink_driver::GimbalCtl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roblink_driver::GimbalCtl_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roblink_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roblink_driver': ['/home/hlb/CHR_Driver/M600Ground/src/roblink_driver/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roblink_driver::GimbalCtl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roblink_driver::GimbalCtl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roblink_driver::GimbalCtl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3da712e93e361ce644847f1c37d59c65";
  }

  static const char* value(const ::roblink_driver::GimbalCtl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3da712e93e361ce6ULL;
  static const uint64_t static_value2 = 0x44847f1c37d59c65ULL;
};

template<class ContainerAllocator>
struct DataType< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roblink_driver/GimbalCtl";
  }

  static const char* value(const ::roblink_driver::GimbalCtl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pitch\n\
float32 yaw\n\
float32 zoom\n\
float32 focus\n\
uint16  home\n\
uint16  TakePicture\n\
uint16  cameraModeChange\n\
uint16  yawfollow\n\
";
  }

  static const char* value(const ::roblink_driver::GimbalCtl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pitch);
      stream.next(m.yaw);
      stream.next(m.zoom);
      stream.next(m.focus);
      stream.next(m.home);
      stream.next(m.TakePicture);
      stream.next(m.cameraModeChange);
      stream.next(m.yawfollow);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GimbalCtl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roblink_driver::GimbalCtl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roblink_driver::GimbalCtl_<ContainerAllocator>& v)
  {
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "yaw: ";
    Printer<float>::stream(s, indent + "  ", v.yaw);
    s << indent << "zoom: ";
    Printer<float>::stream(s, indent + "  ", v.zoom);
    s << indent << "focus: ";
    Printer<float>::stream(s, indent + "  ", v.focus);
    s << indent << "home: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.home);
    s << indent << "TakePicture: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.TakePicture);
    s << indent << "cameraModeChange: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.cameraModeChange);
    s << indent << "yawfollow: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.yawfollow);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBLINK_DRIVER_MESSAGE_GIMBALCTL_H
